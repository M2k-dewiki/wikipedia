#!/usr/bin/perl

use strict;

# Crypt::SSLeay muss installiert sein fuer SSL-Support
# apt-get install libwww-mechanize-perl libio-socket-ssl-perl libnet-ssleay-perl
use WWW::Mechanize;
use Data::Dumper;
use HTML::FormatText;
my $USER_AGENT='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36';
# See the autocheck parameter, which turns all HTTP errors into fatal errors. When you turn autocheck off, you will need to do all error checking yourself.
my $agent = WWW::Mechanize->new( agent => $USER_AGENT,  autocheck => 0 );

#http://glennf.com/writing/hexadecimal.url.encoding.html
# This pattern takes the hex characters and decodes them back into real characters. The function hex() turns a hex number into decimal; 
# there is no dec() that does the reverse in perl. The "e" at the end of the regexp means "evaluate the replacement pattern as an expression."
sub URLDecode {
    my $theURL = $_[0];
    $theURL =~ tr/+/ /;
    $theURL =~ s/%([a-fA-F0-9]{2,2})/chr(hex($1))/eg;
    $theURL =~ s/<!--(.|\n)*-->//g;
    return $theURL;
}

sub URLEncode {
    my $theURL = $_[0];
    $theURL =~ s/([\W])/"%" . uc(sprintf("%2.2x",ord($1)))/eg;
    return $theURL;
}

# - intersection 
# - depth 20
# negative:
# Nur kategorien, keine galerien !!!   
# 
# 

# https://commons.wikimedia.org/wiki/Category:Villages_in_Carinthia
# 
# https://petscan.wmflabs.org/?cb_labels_yes_l=1&namespace_conversion=keep&templates_no=&maxlinks=&search_max_results=500&ns%5B4%5D=1&wpiu=any&project=wikimedia&ns%5B14%5D=1&cb_labels_any_l=1&since_rev0=&outlinks_yes=&language=commons&wikidata_source_sites=&search_filter=&referrer_name=&combination=union&output_limit=&langs_labels_any=&templates_any=&ns%5B0%5D=1&min_redlink_count=1&search_wiki=&common_wiki=auto&langs_labels_yes=&categories=Villages+in+Carinthia&show_disambiguation_pages=both&sitelinks_yes=&smaller=&search_query=&show_redirects=no&min_sitelink_count=&negcats=Wikipedia%3AL%C3%B6schkandidat%0D%0AWikipedia%3ASchnelll%C3%B6schen&sortby=title&wikidata_item=without&cb_labels_no_l=1&ores_prob_from=&ores_prediction=any&referrer_url=&after=&interface_language=en&outlinks_any=&sitelinks_any=&langs_labels_no=&doit=&al_commands=P131%3AQ1741%0AP17%3AQ40%0AP31%3AQ79007



# Exclude:
# Interiors of churches
# Pipe organs

# https://commons.wikimedia.org/wiki/Category:Churches_in_North_Rhine-Westphalia

my $INFILE = 'list.txt';

open ( IN, "< $INFILE") || die("cannot open $INFILE: $! \n");

my $count =0 ;
while(<IN>)
{
    chop;
    my $kat = $_;
    $kat =~ s/^(\s)*//og; # trim
    $kat =~ s/(\s)*$//og; # trim
    $kat =~ s/_/ /og; # trim
    
    # print "KAT:$kat:\n";

    if ($kat eq "") { next ; }
    
    
    my $lemma_mit_klammerzusatz = $kat;  # ohne präfix "category:"
    $lemma_mit_klammerzusatz =~ s/Category://iog;
    #fixme

    my $lemma_ohne_klammerzusatz = $lemma_mit_klammerzusatz;  # ohne präfix und klammerzusatz
    $lemma_ohne_klammerzusatz =~ s/\(.+\)//og;
    $lemma_ohne_klammerzusatz =~ s/^(\s)*//og; # trim
    $lemma_ohne_klammerzusatz =~ s/(\s)*$//og; # trim

    my $lemma_ohne_klammer_aber_mit_zusatz = $lemma_mit_klammerzusatz;  # ohne präfix 
    $lemma_ohne_klammer_aber_mit_zusatz =~ s/^(\s)*//og; # trim
    $lemma_ohne_klammer_aber_mit_zusatz =~ s/(\s)*$//og; # trim
    $lemma_ohne_klammer_aber_mit_zusatz =~ s/\(//og;
    $lemma_ohne_klammer_aber_mit_zusatz =~ s/\)//og;
    
    my $kat_mit_prefix = "Category:".$kat;

    my $klammerzusatz = "";
    if ($lemma_mit_klammerzusatz =~ /\((.+)\)/og) {
      $klammerzusatz = $1;
      # print "KLAMMERZUSATZ:$klammerzusatz:\n";
    }
    
##############

   #   my $url = 'https://commons.wikimedia.org/wiki/Category:Dorfkirche_(Herzsprung_in_der_Uckermark)';
     my $url = 'https://commons.wikimedia.org/wiki/Category:'.URLEncode($kat);
    
#      my $lemma = "";
#     my $lemma_decode = "";
#     if ($url =~ /Category:(.*)$/) {
#        $lemma = $1;
#        $lemma_decode = URLDecode($lemma);
#        $lemma_decode =~ s/_/ /og;
#      }
#       print "LEMMA:$lemma:DECODE:$lemma_decode:\n";
     
       my $check_url = $url.'?action=raw';
       # print "check URL:$check_url:\n"; # exit;

    $agent->get( $check_url );
  my $result2 = $agent->content;
  # print "RESULT:$result2:\n";
  
       # if ($result2 =~ /Wikidata infobox/i) {
         # print STDERR "Lemma $check_url hat Wikidata Infobox - do nothing\n";
         # next;
       # } 

  

my $north = "";
my $east = "";
  if ($result2 =~ /Object location/i) {
      # print "Lemma $check_url hat Object location\n";
      if ($result2 =~ /(\s*)\{\{Object location( dec)?(\s*)\|(\s*)([0-9\.]+)(\s*)\|(\s*)([0-9\.]+)(\s*)\}/i) {
       #  print "*** HIER: 1:$1:2.$2:3:$3:4:$4:5:$5:6:$6:7:$7:8:$8\n";
$north = $5;
$east = $8;
     }
        # print "Lemma $check_url hat location $north $east:\n";
   } # Baudenkmal
   
##############

    
    # print "KAT:$kat:LEMMA_MIT:$lemma_mit_klammerzusatz:LEMMA_OHNE:$lemma_ohne_klammerzusatz:\n";

    print "CREATE\n";
   print "LAST\tLde\t\"$lemma_ohne_klammerzusatz\"\n"; # label de - bezeichnung
  print "LAST\tLen\t\"$lemma_ohne_klammerzusatz\"\n"; # label en - bezeichnung
  print "LAST\tLde-at\t\"$lemma_ohne_klammerzusatz\"\n"; # label de-at - bezeichnung
#    print "LAST\tLde\t\"$lemma_ohne_klammer_aber_mit_zusatz\"\n"; # label de - bezeichnung


    my $alias = $lemma_mit_klammerzusatz;
    if ($lemma_mit_klammerzusatz ne $lemma_ohne_klammerzusatz) {
      print "LAST\tAde\t\"$alias\"\n"; # alias de - alias
    }
  
    my $beschreibung = "Ort in Kärnten, Österreich";
    my $beschreibung_en = "village in Carinthia, Austria";

#    if ($klammerzusatz ne "") { $beschreibung = $beschreibung." in ".$klammerzusatz; }
        
    print "LAST\tDde\t\"$beschreibung\"\n"; # description de - beschreibung
    print "LAST\tDen\t\"$beschreibung_en\"\n"; # description en - beschreibung
    print "LAST\tScommonswiki\t\"$kat_mit_prefix\"\n"; # sitelink

    print "LAST\tP31\tQ3257686\n"; # ist eine: Ortschaft
    print "LAST\tP17\tQ40\n"; # Staat: Österreich
    print "LAST\tP131\tQ37985\n"; # liegt in der Verwaltungseinheit: Kärnten
    
    print "LAST\tP373\t\"$kat\"\n";   # Commonscat-Property
   

    
if (($north ne "") && ($east ne "")) {
  my $cord = '@'.$north.'/'.$east;
    print "LAST\tP625\t$cord\n";   # koordinaten 
 }


 


}
close(IN);
