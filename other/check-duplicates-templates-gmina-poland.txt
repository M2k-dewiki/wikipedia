#!/usr/bin/perl

use strict;

# Crypt::SSLeay muss installiert sein fuer SSL-Support
# apt-get install libwww-mechanize-perl libio-socket-ssl-perl libnet-ssleay-perl
use WWW::Mechanize;
use Data::Dumper;
use HTML::FormatText;

#http://glennf.com/writing/hexadecimal.url.encoding.html
# This pattern takes the hex characters and decodes them back into real characters. The function hex() turns a hex number into decimal; there is no dec() that does the reverse in perl. The "e" at the end of the regexp means "evaluate the replacement pattern as an expression."
sub URLDecode {
    my $theURL = $_[0];
    $theURL =~ tr/+/ /;
    $theURL =~ s/%([a-fA-F0-9]{2,2})/chr(hex($1))/eg;
    $theURL =~ s/<!--(.|\n)*-->//g;
    return $theURL;
}

sub URLEncode {
    my $theURL = $_[0];
    $theURL =~ s/([\W])/"%" . uc(sprintf("%2.2x",ord($1)))/eg;
    return $theURL;
}





####################
### TODO:

### for each object check if there is already a existing sitelink
### if there already is a sitelink, then do not change that object --> only add new sitelinks, dont modify existing sitelinks

######
####################


my $USER_AGENT='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36';

# See the autocheck parameter, which turns all HTTP errors into fatal errors. When you turn autocheck off, you will need to do all error checking yourself.
my $agent = WWW::Mechanize->new( agent => $USER_AGENT,  autocheck => 0 );

##########################

# https://w.wiki/7BPc
# 
# SELECT DISTINCT ?item ?label 
# WHERE
# {
#   SERVICE wikibase:mwapi
#   {
#     bd:serviceParam wikibase:endpoint "www.wikidata.org";
#                     wikibase:api "Generator";
#                     mwapi:generator "search";
#                     mwapi:gsrsearch "Template Gmina Oława"@en;
#                     mwapi:gsrlimit "max".
#     ?item wikibase:apiOutputItem mwapi:title.
#   }
# }


################

# https://en.wikipedia.org/wiki/Category:Poland_commune_(gmina)_templates

# https://petscan.wmflabs.org/?show_redirects=no&edits%5Bbots%5D=both&categories=Poland+commune+%28gmina%29+templates&links_to_no=&referrer_url=&sortby=none&depth=30&larger=&after=&sitelinks_no=&page_image=any&manual_list=&langs_labels_no=&ores_prob_from=&wikidata_prop_item_use=&source_combination=&language=en&min_sitelink_count=&sortorder=ascending&active_tab=tab_categories&ns%5B0%5D=1&negcats=Wikipedia%3AL%C3%B6schkandidat&manual_list_wiki=&sitelinks_yes=&sitelinks_any=&wikidata_label_language=&langs_labels_yes=&cb_labels_any_l=1&output_compatability=catscan&output_limit=&interface_language=en&cb_labels_yes_l=1&search_wiki=&ns%5B10%5D=1&before=&combination=union&search_query=&project=wikipedia&max_age=&search_max_results=500&wikidata_item=with&cb_labels_no_l=1&labels_yes=&doit=


# https://petscan.wmflabs.org/?psid=25545140

# https://www.wikidata.org/w/index.php?go=Seite&search=Template+Gmina+O%C5%82awa&search=Template+Gmina+O%C5%82awa&title=Special%3ASearch&ns0=1&ns120=1


################

print "
{| class='wikitable sortable'
! Template
! Item1
! Item2
! Item3
! Item4
! Item5
|-
";




my $INFILE = 'list.txt';

open ( IN, "< $INFILE") || die("cannot open $INFILE: $! \n");

my $count =0 ;
while(<IN>)
{
	
	chop;
    my $kat = $_;
    $kat =~ s/^(\s)*//og; # trim
    $kat =~ s/(\s)*$//og; # trim
    $kat =~ s/_/ /og; # trim

#test my $kat = 'Gmina Oława';

     my $lemma_encode = URLEncode($kat);
  #    print "KAT:$kat:encode:$lemma_encode:\n";


  my $wd_url = 'https://query.wikidata.org/sparql?query=SELECT%20DISTINCT%20%3Fitem%20%3Flabel%20%0AWHERE%0A%7B%0A%0A%20%20SERVICE%20wikibase%3Amwapi%0A%20%20%7B%0A%20%20%20%20bd%3AserviceParam%20wikibase%3Aendpoint%20%22www.wikidata.org%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20wikibase%3Aapi%20%22Generator%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20mwapi%3Agenerator%20%22search%22%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20mwapi%3Agsrsearch%20%22Template%20'.$lemma_encode.'%22%40en%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20mwapi%3Agsrlimit%20%22max%22.%0A%20%20%20%20%3Fitem%20wikibase%3AapiOutputItem%20mwapi%3Atitle.%0A%20%20%7D%0A%0A%0A%7D';


	  #   print "WD_URL:$wd_url:\n";
            #   "Accept: application/json"
	    # "Accept: text/csv"
               # 'Accept' => 'application/json'
	    $agent->add_header(
               'Accept' => 'text/csv'
		);
	    $agent->get( $wd_url );
          my $result3 = $agent->content;
	   #  print "RESULT:$result3:\n";
	    # print "LINE2:".@result3[1]."\n";

my @result_lines = split ("\r\n",$result3);
my $noe = @result_lines;
# print "number_of_elements:$noe:\n";

if ($noe > 2) {

my $count_match = 0;
my @qid_list = ();

foreach my $this_line (@result_lines) {
#	print "THIS_LINE:$this_line:\n";

   if ($this_line =~ /wikidata.org\/entity\/Q([0-9]+),$/i) {
	   
	      
   	$count_match++;
    my	      $qid = $1;

       if ($count_match == 1) { 
	        print "|-\n"; print "| $kat\n"; 
	   }
	    print "| [[:d:Q".$qid."]]:\n";
       push(@qid_list, $qid) ;  
		 
		 
	} # if
	  
} # foreach

my $number_of_qidlist_elements = @qid_list;

# print "NOE:$number_of_qidlist_elements:\n";
# if ($number_of_qidlist_elements == 2) {
#   if ($qid_list[0] > $qid_list[1]) {
#      print "MERGE\tQ".@qid_list[0]."\tQ".$qid_list[1]."\n";
#   } else {
#     print "MERGE\tQ".@qid_list[1]."\tQ".$qid_list[0]."\n";
#   }	
# }

# if ($number_of_qidlist_elements == 3) {
#   print "MERGE\tQ".@qid_list[2]."\tQ".$qid_list[0]."\n";
#   print "MERGE\tQ".@qid_list[1]."\tQ".$qid_list[0]."\n";
# }



} # if


} # while

print '|}
';


 exit;

	
	
# my @lines = split (/\r\n/,$result3);
# my @lines = split (/\n\r/,$result3);
#  foreach my $line (@lines) {  print "LINE:$line:\n";

#	  if ($line =~ /wikidata.org\/entity\/Q([0-9]+),(.*)$/i) {
  
#	       print "QID:$1:CAT:$2:\n";
#my	      $qid = $1;
#my	      $LEMMA_MATCH = $2;
#	$$LEMMA_MATCH =~ s/\s//og;
# if ( $LEMMA_MATCH  eq $kat) { print "**** MATCH $LEMMA_MATCH $kat **** \n"; }
 
 
#	  } # lines
exit;
    
	    my $qid = 0; my $wd_commonscat = "";
#	  if ($result3 =~ /wikidata.org\/entity\/Q([0-9]+),$kat/i) {

	  
#	    if ($wd_tr ne "") {
		# print "lemma $lemma hat bereits commonscat $wd_commonscat - do nothing\n";
#	    } else {
	      
#	      if ($qid > 0 ) {
	        # Wenn Q-ID gefunden, dann quickstatement ausgeben
	        # print "QUICKSTATEMENT for Q$qid\n";

 	        # Q41269749	P373	"Ringstraße 13 Hofkapelle (Übersee, Chiemgau)"
                # Q41269749	Scommonswiki	"Category:Ringstraße 13 Hofkapelle (Übersee, Chiemgau)"

#		print "Q".$qid."\t".'P373'."\t".'"'.$lemma_decode.'"'."\n";
#	        print "Q".$qid."\t".'Scommonswiki'."\t".'"Category:'.$lemma_decode.'"'."\n";
# $count++;
# 	  if ($count == 5) { exit ; }
# print "------------------\n",

#		  } # qid > 0

  #  exit;
 


# # outer loop
 

exit 0;

