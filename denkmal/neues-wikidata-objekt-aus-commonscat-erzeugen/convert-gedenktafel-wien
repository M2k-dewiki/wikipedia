#!/usr/bin/perl

use strict;

# Crypt::SSLeay muss installiert sein fuer SSL-Support
# apt-get install libwww-mechanize-perl libio-socket-ssl-perl libnet-ssleay-perl
use WWW::Mechanize;
use Data::Dumper;
use HTML::FormatText;
my $USER_AGENT='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36';
# See the autocheck parameter, which turns all HTTP errors into fatal errors. When you turn autocheck off, you will need to do all error checking yourself.
my $agent = WWW::Mechanize->new( agent => $USER_AGENT,  autocheck => 0 );

#http://glennf.com/writing/hexadecimal.url.encoding.html
# This pattern takes the hex characters and decodes them back into real characters. The function hex() turns a hex number into decimal; 
# there is no dec() that does the reverse in perl. The "e" at the end of the regexp means "evaluate the replacement pattern as an expression."
sub URLDecode {
    my $theURL = $_[0];
    $theURL =~ tr/+/ /;
    $theURL =~ s/%([a-fA-F0-9]{2,2})/chr(hex($1))/eg;
    $theURL =~ s/<!--(.|\n)*-->//g;
    return $theURL;
}

sub URLEncode {
    my $theURL = $_[0];
    $theURL =~ s/([\W])/"%" . uc(sprintf("%2.2x",ord($1)))/eg;
    return $theURL;
}

# # https://petscan.wmflabs.org/?search_max_results=500&langs_labels_yes=&wikidata_item=without&active_tab=tab_categories&links_to_any=&maxlinks=&min_redlink_count=1&templates_no=&max_sitelink_count=&common_wiki=auto&namespace_conversion=keep&outlinks_any=&edits%5Banons%5D=both&before=&output_limit=&depth=30&project=wikimedia&cb_labels_any_l=1&show_disambiguation_pages=both&sitelinks_no=&sitelinks_yes=&since_rev0=&outlinks_yes=&show_redirects=no&common_wiki_other=&pagepile=&categories=Plaques+in+D%C3%B6bling&cb_labels_yes_l=1&labels_any=&referrer_url=&ns%5B14%5D=1&cb_labels_no_l=1&sortby=title&interface_language=en&regexp_filter=&links_to_no=&language=commons&search_query=&ores_prob_to=&subpage_filter=either&wikidata_prop_item_use=&templates_any=&doit=

# https://commons.wikimedia.org/wiki/Category:Plaques_in_D%C3%B6bling

# https://commons.wikimedia.org/wiki/Category:Plaques_in_Innere_Stadt,_Vienna


my $INFILE = 'list.txt';

open ( IN, "< $INFILE") || die("cannot open $INFILE: $! \n");

my $count =0 ;
while(<IN>)
{
    chop;
    my $kat = $_;
    $kat =~ s/^(\s)*//og; # trim
    $kat =~ s/(\s)*$//og; # trim
    $kat =~ s/_/ /og; # trim
    
    # print "KAT:$kat:\n";
         if ($kat eq "") { next ; }
    my $lemma_mit_klammerzusatz = $kat;  # ohne präfix "category:"
    $lemma_mit_klammerzusatz =~ s/Category://iog;
    #fixme

    my $lemma_ohne_klammerzusatz = $lemma_mit_klammerzusatz;  # ohne präfix und klammerzusatz
    $lemma_ohne_klammerzusatz =~ s/\(.+\)//og;
    $lemma_ohne_klammerzusatz =~ s/^(\s)*//og; # trim
    $lemma_ohne_klammerzusatz =~ s/(\s)*$//og; # trim

    my $lemma_ohne_klammer_aber_mit_zusatz = $lemma_mit_klammerzusatz;  # ohne präfix 
    $lemma_ohne_klammer_aber_mit_zusatz =~ s/^(\s)*//og; # trim
    $lemma_ohne_klammer_aber_mit_zusatz =~ s/(\s)*$//og; # trim
    $lemma_ohne_klammer_aber_mit_zusatz =~ s/\(//og;
    $lemma_ohne_klammer_aber_mit_zusatz =~ s/\)//og;
    
    my $kat_mit_prefix = "Category:".$kat;

   
        
    my $klammerzusatz = "";
    if ($lemma_mit_klammerzusatz =~ /\((.+)\)/og) {
      $klammerzusatz = $1;
      # print "KLAMMERZUSATZ:$klammerzusatz:\n";
    }
    
   
    # print "KAT:$kat:LEMMA_MIT:$lemma_mit_klammerzusatz:LEMMA_OHNE:$lemma_ohne_klammerzusatz:\n";
    
	
##############

   #   my $url = 'https://commons.wikimedia.org/wiki/Category:Dorfkirche_(Herzsprung_in_der_Uckermark)';
     my $url = 'https://commons.wikimedia.org/wiki/Category:'.URLEncode($kat);
    
     
       my $check_url = $url.'?action=raw';
       # print "check URL:$check_url:\n"; # exit;

    $agent->get( $check_url );
  my $result2 = $agent->content;
  # print "RESULT:$result2:\n";
  
       if ($result2 =~ /Wikidata infobox/i) {
        # print STDERR "Lemma $check_url hat Wikidata Infobox - do nothing\n";   next;
     } 
  
my $north = "";
my $east = "";
  if ($result2 =~ /Object location/i) {
      # print "Lemma $check_url hat Object location\n";
      if ($result2 =~ /(\s*)\{\{Object location( dec)?(\s*)\|(\s*)([0-9\.]+)(\s*)\|(\s*)([0-9\.]+)(\s*)\}/i) {
       #  print "*** HIER: 1:$1:2.$2:3:$3:4:$4:5:$5:6:$6:7:$7:8:$8\n";
$north = $5;
$east = $8;
     }
        # print "Lemma $check_url hat location $north $east:\n";
   } # Baudenkmal
   
##############

   
	
    print "CREATE\n";
   print "LAST\tLde\t\"$lemma_mit_klammerzusatz\"\n"; # label de - bezeichnung


#    my $alias = $lemma_mit_klammerzusatz;
#    if ($lemma_mit_klammerzusatz ne $lemma_ohne_klammerzusatz) {
#      print "LAST\tAde\t\"$alias\"\n"; # alias de - alias
#    }
  
     my $beschreibung = "Gedenktafel in Wien-Liesing, Österreich";
     my $beschreibung_en = "plaque in Liesing, Vienna, Austria";
     
#     if ($klammerzusatz ne "") { $beschreibung = $beschreibung." in ".$klammerzusatz; }
        print "LAST\tDde\t\"$beschreibung\"\n"; # description de - beschreibung
        print "LAST\tDen\t\"$beschreibung_en\"\n"; # description de - beschreibung
    
    print "LAST\tScommonswiki\t\"$kat_mit_prefix\"\n"; # sitelink
	
	
     print "LAST\tP31\tQ721747\n"; # ist ein(e) (P31): Gedenktafel (Q721747)
	 
#     print "LAST\tP31\tQ811979\n"; # ist eine: Bauwerk
	 	 
    print "LAST\tP17\tQ40\n"; # Staat: Österreich
#        print "LAST\tP131\tQ1741\n"; # liegt in der Verwaltungseinheit: Wien 
#        print "LAST\tP131\tQ267360\n"; # liegt in der Verwaltungseinheit (P131): Döbling (Q267360)
#        print "LAST\tP131\tQ267329\n"; # liegt in der Verwaltungseinheit (P131): 	Innere Stadt (Q267329)
#        print "LAST\tP131\tQ259120\n"; # liegt in der Verwaltungseinheit (P131): 	Leopoldstadt (Q259120)
#        print "LAST\tP131\tQ519552\n"; # liegt in der Verwaltungseinheit (P131): 	Landstraße (Q519552)
#        print "LAST\tP131\tQ268001\n"; # liegt in der Verwaltungseinheit (P131): 	Wieden (Q268001)
#        print "LAST\tP131\tQ252731\n"; # liegt in der Verwaltungseinheit (P131): 	Margareten (Q252731)
#        print "LAST\tP131\tQ654812\n"; # liegt in der Verwaltungseinheit (P131): 	Mariahilf (Q654812)
#        print "LAST\tP131\tQ664835\n"; # liegt in der Verwaltungseinheit (P131): 	Neubau (Q664835)
#        print "LAST\tP131\tQ256778\n"; # liegt in der Verwaltungseinheit (P131): 	Josefstadt (Q256778)
#        print "LAST\tP131\tQ257780\n"; # liegt in der Verwaltungseinheit (P131): 	Alsergrund (Q257780)
#        print "LAST\tP131\tQ697548\n"; # liegt in der Verwaltungseinheit (P131): 	Favoriten (Q697548)
#        print "LAST\tP131\tQ279028\n"; # liegt in der Verwaltungseinheit (P131): 	Simmering (Q279028)
#        print "LAST\tP131\tQ697557\n"; # liegt in der Verwaltungseinheit (P131): 	Meidling (Q697557)
#        print "LAST\tP131\tQ636910\n"; # liegt in der Verwaltungseinheit (P131): 	Hietzing (Q636910)
#        print "LAST\tP131\tQ690335\n"; # liegt in der Verwaltungseinheit (P131): 	Penzing (Q690335)
#        print "LAST\tP131\tQ653289\n"; # liegt in der Verwaltungseinheit (P131): 	Rudolfsheim-Fünfhaus (Q653289)
#        print "LAST\tP131\tQ265945\n"; # liegt in der Verwaltungseinheit (P131): 	Ottakring (Q265945)
#        print "LAST\tP131\tQ262808\n"; # liegt in der Verwaltungseinheit (P131): 	Hernals (Q262808)
#        print "LAST\tP131\tQ690417\n"; # liegt in der Verwaltungseinheit (P131): 	Währing (Q690417)
#        print "LAST\tP131\tQ265655\n"; # liegt in der Verwaltungseinheit (P131): 	Brigittenau (Q265655)
#        print "LAST\tP131\tQ264645\n"; # liegt in der Verwaltungseinheit (P131): 	Floridsdorf (Q264645)
#        print "LAST\tP131\tQ258333\n"; # liegt in der Verwaltungseinheit (P131): 	Donaustadt (Q258333)
        print "LAST\tP131\tQ278900\n"; # liegt in der Verwaltungseinheit (P131): 	Liesing (Q278900)




    
    print "LAST\tP373\t\"$kat\"\n";   # Commonscat-Property
   

if (($north ne "") && ($east ne "")) {
  my $cord = '@'.$north.'/'.$east;
    print "LAST\tP625\t$cord\n";   # koordinaten 
 }

 

}
close(IN);
