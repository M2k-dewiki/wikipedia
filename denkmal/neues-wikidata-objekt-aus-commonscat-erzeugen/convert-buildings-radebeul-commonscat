#!/usr/bin/perl

use strict;

# Crypt::SSLeay muss installiert sein fuer SSL-Support
# apt-get install libwww-mechanize-perl libio-socket-ssl-perl libnet-ssleay-perl
use WWW::Mechanize;
use Data::Dumper;
use HTML::FormatText;
my $USER_AGENT='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36';
# See the autocheck parameter, which turns all HTTP errors into fatal errors. When you turn autocheck off, you will need to do all error checking yourself.
my $agent = WWW::Mechanize->new( agent => $USER_AGENT,  autocheck => 0 );

#http://glennf.com/writing/hexadecimal.url.encoding.html
# This pattern takes the hex characters and decodes them back into real characters. The function hex() turns a hex number into decimal; 
# there is no dec() that does the reverse in perl. The "e" at the end of the regexp means "evaluate the replacement pattern as an expression."
sub URLDecode {
    my $theURL = $_[0];
    $theURL =~ tr/+/ /;
    $theURL =~ s/%([a-fA-F0-9]{2,2})/chr(hex($1))/eg;
    $theURL =~ s/<!--(.|\n)*-->//g;
    return $theURL;
}

sub URLEncode {
    my $theURL = $_[0];
    $theURL =~ s/([\W])/"%" . uc(sprintf("%2.2x",ord($1)))/eg;
    return $theURL;
}

#
# - baudenkmaler in Sachsen/Meißen + id
#
# Cultural heritage monuments in Saxony without linked Wikidata
# Dresden
# 
# https://petscan.wmflabs.org/?&search_max_results=500&cb_labels_yes_l=1&language=commons&edits%5Bbots%5D=both&edits%5Bflagged%5D=both&interface_language=en&edits%5Banons%5D=both&wikidata_item=without&project=wikimedia&depth=10&show_redirects=no&cb_labels_no_l=1&ns%5B14%5D=1&categories=Cultural%20heritage%20monuments%20in%20Saxony%20without%20linked%20Wikidata%0ADresden%0A&cb_labels_any_l=1&&doit=

###################
# https://commons.wikimedia.org/wiki/Category:Residential_buildings_in_Radebeul
# https://petscan.wmflabs.org/?&cb_labels_any_l=1&categories=Residential%20buildings%20in%20Radebeul&wikidata_item=without&interface_language=en&since_rev0=&cb_labels_yes_l=1&language=commons&depth=10&cb_labels_no_l=1&show_redirects=no&edits%5Bflagged%5D=both&project=wikimedia&edits%5Bbots%5D=both&ns%5B14%5D=1&search_max_results=500&edits%5Banons%5D=both&doit=


# https://commons.wikimedia.org/wiki/Category:Buildings_in_Radebeul

###################

# SELECT ?item ?itemLabel ?value ?liegt_in_der_Verwaltungseinheit ?liegt_in_der_VerwaltungseinheitLabel ?Bild WHERE {
#  ?item wdt:P1708 ?value.
#  ?item wdt:P131 wdt:Q8738.
#  SERVICE wikibase:label { bd:serviceParam wikibase:language "de,en". }
#  OPTIONAL { ?item wdt:P131 ?liegt_in_der_Verwaltungseinheit. }
#  OPTIONAL { ?item wdt:P18 ?Bild. }
# } order by ?liegt_in_der_VerwaltungseinheitLabel



my $INFILE = 'list.txt';

open ( IN, "< $INFILE") || die("cannot open $INFILE: $! \n");

my $count =0 ;
while(<IN>)
{
    chop;
    my $kat = $_;
    $kat =~ s/^(\s)*//og; # trim
    $kat =~ s/(\s)*$//og; # trim
    $kat =~ s/_/ /og; # trim
    
    # print "KAT:$kat:\n";
         if ($kat eq "") { next ; }
    my $lemma_mit_klammerzusatz = $kat;  # ohne präfix "category:"
    $lemma_mit_klammerzusatz =~ s/Category://iog;
    #fixme

    my $lemma_ohne_klammerzusatz = $lemma_mit_klammerzusatz;  # ohne präfix und klammerzusatz
    $lemma_ohne_klammerzusatz =~ s/\(.+\)//og;
    $lemma_ohne_klammerzusatz =~ s/^(\s)*//og; # trim
    $lemma_ohne_klammerzusatz =~ s/(\s)*$//og; # trim

    my $lemma_ohne_klammer_aber_mit_zusatz = $lemma_mit_klammerzusatz;  # ohne präfix 
    $lemma_ohne_klammer_aber_mit_zusatz =~ s/^(\s)*//og; # trim
    $lemma_ohne_klammer_aber_mit_zusatz =~ s/(\s)*$//og; # trim
    $lemma_ohne_klammer_aber_mit_zusatz =~ s/\(//og;
    $lemma_ohne_klammer_aber_mit_zusatz =~ s/\)//og;
    
    my $kat_mit_prefix = "Category:".$kat;

   
        
    my $klammerzusatz = "";
    if ($lemma_mit_klammerzusatz =~ /\((.+)\)/og) {
      $klammerzusatz = $1;
      # print "KLAMMERZUSATZ:$klammerzusatz:\n";
    }
    
   
    # print "KAT:$kat:LEMMA_MIT:$lemma_mit_klammerzusatz:LEMMA_OHNE:$lemma_ohne_klammerzusatz:\n";
    
    print "CREATE\n";
   print "LAST\tLde\t\"$lemma_ohne_klammerzusatz\"\n"; # label de - bezeichnung


    my $alias = $lemma_mit_klammerzusatz;
    if ($lemma_mit_klammerzusatz ne $lemma_ohne_klammerzusatz) {
      print "LAST\tAde\t\"$alias\"\n"; # alias de - alias
    }
  
     my $beschreibung = "Bauwerk in Radebeul";
     
#     if ($klammerzusatz ne "") { $beschreibung = $beschreibung." in ".$klammerzusatz; }
        print "LAST\tDde\t\"$beschreibung\"\n"; # description de - beschreibung
    
    print "LAST\tScommonswiki\t\"$kat_mit_prefix\"\n"; # sitelink
#     print "LAST\tP31\tQ16970\n"; # ist eine: Kirchengebäude
     print "LAST\tP31\tQ811979\n"; # ist eine: Bauwerk
    print "LAST\tP17\tQ183\n"; # Staat: Deutschland

        print "LAST\tP131\tQ8762\n"; # liegt in der Verwaltungseinheit: Radebeul (Q8762)
    
    
    print "LAST\tP373\t\"$kat\"\n";   # Commonscat-Property
   



}
close(IN);
