#!/usr/bin/perl

use strict;

# Crypt::SSLeay muss installiert sein fuer SSL-Support
# apt-get install libwww-mechanize-perl libio-socket-ssl-perl libnet-ssleay-perl
use WWW::Mechanize;
use Data::Dumper;
use HTML::FormatText;
my $USER_AGENT='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36';
# See the autocheck parameter, which turns all HTTP errors into fatal errors. When you turn autocheck off, you will need to do all error checking yourself.
my $agent = WWW::Mechanize->new( agent => $USER_AGENT,  autocheck => 0 );

#http://glennf.com/writing/hexadecimal.url.encoding.html
# This pattern takes the hex characters and decodes them back into real characters. The function hex() turns a hex number into decimal; 
# there is no dec() that does the reverse in perl. The "e" at the end of the regexp means "evaluate the replacement pattern as an expression."
sub URLDecode {
    my $theURL = $_[0];
    $theURL =~ tr/+/ /;
    $theURL =~ s/%([a-fA-F0-9]{2,2})/chr(hex($1))/eg;
    $theURL =~ s/<!--(.|\n)*-->//g;
    return $theURL;
}

sub URLEncode {
    my $theURL = $_[0];
    $theURL =~ s/([\W])/"%" . uc(sprintf("%2.2x",ord($1)))/eg;
    return $theURL;
}

# # https://petscan.wmflabs.org/?search_query=&max_sitelink_count=&maxlinks=&ores_prob_to=&pagepile=&wpiu=any&labels_any=&output_compatability=catscan&links_to_no=&interface_language=en&language=commons&wikidata_source_sites=&cb_labels_any_l=1&ns%5B14%5D=1&cb_labels_no_l=1&source_combination=&project=wikimedia&depth=30&labels_yes=&wikidata_prop_item_use=&min_sitelink_count=&wikidata_label_language=&templates_no=&negcats=Interiors+of+churches+in+Brandenburg&minlinks=&sortby=title&show_redirects=no&manual_list=&cb_labels_yes_l=1&output_limit=&wikidata_item=without&outlinks_any=&langs_labels_any=&search_filter=&common_wiki_other=&links_to_all=&search_max_results=500&sitelinks_yes=&sortorder=ascending&search_wiki=&categories=Jewish+cemeteries+in+Germany+by+state&subpage_filter=either&edits%5Bflagged%5D=both&doit=

# https://commons.wikimedia.org/wiki/Category:Jewish_cemeteries_in_Germany_by_state




my $INFILE = 'list.txt';

open ( IN, "< $INFILE") || die("cannot open $INFILE: $! \n");

my $count =0 ;
while(<IN>)
{
    chop;
    my $kat = $_;
    $kat =~ s/^(\s)*//og; # trim
    $kat =~ s/(\s)*$//og; # trim
    $kat =~ s/_/ /og; # trim
    
    # print "KAT:$kat:\n";
         if ($kat eq "") { next ; }
    my $lemma_mit_klammerzusatz = $kat;  # ohne präfix "category:"
    $lemma_mit_klammerzusatz =~ s/Category://iog;
    #fixme

    my $lemma_ohne_klammerzusatz = $lemma_mit_klammerzusatz;  # ohne präfix und klammerzusatz
    $lemma_ohne_klammerzusatz =~ s/\(.+\)//og;
    $lemma_ohne_klammerzusatz =~ s/^(\s)*//og; # trim
    $lemma_ohne_klammerzusatz =~ s/(\s)*$//og; # trim

    my $lemma_ohne_klammer_aber_mit_zusatz = $lemma_mit_klammerzusatz;  # ohne präfix 
    $lemma_ohne_klammer_aber_mit_zusatz =~ s/^(\s)*//og; # trim
    $lemma_ohne_klammer_aber_mit_zusatz =~ s/(\s)*$//og; # trim
    $lemma_ohne_klammer_aber_mit_zusatz =~ s/\(//og;
    $lemma_ohne_klammer_aber_mit_zusatz =~ s/\)//og;
    
    my $kat_mit_prefix = "Category:".$kat;

   
        
    my $klammerzusatz = "";
    if ($lemma_mit_klammerzusatz =~ /\((.+)\)/og) {
      $klammerzusatz = $1;
      # print "KLAMMERZUSATZ:$klammerzusatz:\n";
    }
    
   
    # print "KAT:$kat:LEMMA_MIT:$lemma_mit_klammerzusatz:LEMMA_OHNE:$lemma_ohne_klammerzusatz:\n";
    
	
##############

   #   my $url = 'https://commons.wikimedia.org/wiki/Category:Dorfkirche_(Herzsprung_in_der_Uckermark)';
     my $url = 'https://commons.wikimedia.org/wiki/Category:'.URLEncode($kat);
    
     
       my $check_url = $url.'?action=raw';
       # print "check URL:$check_url:\n"; # exit;

    $agent->get( $check_url );
  my $result2 = $agent->content;
  # print "RESULT:$result2:\n";
  
      # if ($result2 =~ /Wikidata infobox/i) {
      #  print STDERR "Lemma $check_url hat Wikidata Infobox - do nothing\n";
      #  next;
     # } 
  
my $north = "";
my $east = "";
  if ($result2 =~ /Object location/i) {
      # print "Lemma $check_url hat Object location\n";
      if ($result2 =~ /(\s*)\{\{Object location( dec)?(\s*)\|(\s*)([0-9\.]+)(\s*)\|(\s*)([0-9\.]+)(\s*)\}/i) {
       #  print "*** HIER: 1:$1:2.$2:3:$3:4:$4:5:$5:6:$6:7:$7:8:$8\n";
$north = $5;
$east = $8;
     }
        # print "Lemma $check_url hat location $north $east:\n";
   } # Baudenkmal
   
##############

   
	
    print "CREATE\n";
   print "LAST\tLde\t\"$lemma_ohne_klammerzusatz\"\n"; # label de - bezeichnung


    my $alias = $lemma_mit_klammerzusatz;
    if ($lemma_mit_klammerzusatz ne $lemma_ohne_klammerzusatz) {
      print "LAST\tAde\t\"$alias\"\n"; # alias de - alias
    }
  
     my $beschreibung = "jüdischer Friedhof ";
     my $beschreibung_en = "Jewish cemetery in Germany";
     
     if ($klammerzusatz ne "") { $beschreibung = $beschreibung." in ".$klammerzusatz; }
        print "LAST\tDde\t\"$beschreibung\"\n"; # description de - beschreibung
        print "LAST\tDen\t\"$beschreibung_en\"\n"; # description en - beschreibung
    
    print "LAST\tScommonswiki\t\"$kat_mit_prefix\"\n"; # sitelink
	
	
#     print "LAST\tP31\tQ1244442\n"; # ist eine: Schulgebäude
#     print "LAST\tP31\tQ3914\n"; # ist eine: Schule
#     print "LAST\tP31\tQ811979\n"; # ist eine: Bauwerk

     print "LAST\tP31\tQ846659\n"; # ist eine: jüdischer Friedhof (Q846659)


	    print "LAST\tP17\tQ183\n"; # Staat: Deutschland
    
    
    print "LAST\tP373\t\"$kat\"\n";   # Commonscat-Property
   

if (($north ne "") && ($east ne "")) {
  my $cord = '@'.$north.'/'.$east;
    print "LAST\tP625\t$cord\n";   # koordinaten 
 }

 

}
close(IN);
